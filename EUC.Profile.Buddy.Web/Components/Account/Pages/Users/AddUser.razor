@page "/Account/AddUser"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using EUC.Profile.Buddy.Web.Repositories.Entities
@using EUC.Profile.Buddy.Web.Components.Account

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<AddUser> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Add User</PageTitle>

<StatusMessage Message="@Message" />
<EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
    <DataAnnotationsValidator />
    <br />
    <h4>Create User</h4>
    <hr />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <label for="email">Email</label>
        <ValidationMessage For="() => Input.Email" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
        <label for="password">Password</label>
        <ValidationMessage For="() => Input.Password" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
        <label for="confirm-password">Confirm Password</label>
        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
    </div>
    <br />
        <h6>Assign to Authorization Role</h6>
        <hr />
    <div class="form-floating mb-3">
        <InputCheckbox DisplayName="Reader" @bind-Value="Input.Reader" /> Reader <br />
        <InputCheckbox DisplayName="Helpdesk" @bind-Value="Input.Helpdesk" /> Helpdesk <br />
        <InputCheckbox DisplayName="Administrator" @bind-Value="Input.Administrator" /> Administrator
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Add User</button>
</EditForm>

<br />
<hr />
<a href="/Account/UserList" class="btn btn-secondary">Back</a>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (Input.Reader)
        {
            var readerRole = RoleManager.FindByNameAsync("Reader").Result;

            if (readerRole != null)
            {
                IdentityResult roleresult = await UserManager.AddToRoleAsync(user, readerRole.Name);
            }
        }

        if (Input.Helpdesk)
        {
            var helpdeskRole = RoleManager.FindByNameAsync("HelpDesk").Result;

            if (helpdeskRole != null)
            {
                IdentityResult roleresult = await UserManager.AddToRoleAsync(user, helpdeskRole.Name);
            }
        }

        if (Input.Administrator)
        {
            var adminRole = RoleManager.FindByNameAsync("Administrator").Result;

            if (adminRole != null)
            {
                IdentityResult roleresult = await UserManager.AddToRoleAsync(user, adminRole.Name);
            }
        }

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        RedirectManager.RedirectTo("/Account/UserList");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        public bool Reader { get; set; } = true;
        public bool Helpdesk { get; set; } = false;
        public bool Administrator { get; set; } = false;
    }
}
